#if !defined(AFX_WSVIEW_H__F3557F01_0509_46AE_B76E_5B53A99F86EB__INCLUDED_)
#define AFX_WSVIEW_H__F3557F01_0509_46AE_B76E_5B53A99F86EB__INCLUDED_


// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CWSView wrapper class

class CWSView : public CWnd
{
protected:
	DECLARE_DYNCREATE(CWSView)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xe0748846, 0x5814, 0x11d3, { 0xba, 0x96, 0x0, 0x10, 0xa4, 0x4, 0x32, 0x81 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	long GetDisplayLength();
	void SetDisplayLength(long);
	BOOL GetPointDisplay();
	void SetPointDisplay(BOOL);

// Operations
public:
	void SetTimeRange(long lStartTime, long lEndTime);
	short AddPilot(LPCTSTR strContestNo, LPCTSTR strLastName, LPCTSTR strFirstName, short sClass);
	BOOL SetCurrentTimeIndex(short sTime);
	void SetPilotVisibility(LPCTSTR strContestNo, BOOL bVisible);
	void SetViewScale(double dScale);
	void SetViewCenter(float dLat, float dLong);
	void AddControlPoint(short sID, LPCTSTR strName, float fLatitude, float fLongitude, short sAltitude, short sAttribute);
	void SetStartGateCylinder(float fGateLatitude, float fGateLongitude, float fGateSize, short sGateHeight, short sGateBase);
	void SetFinishGateCylinder(float fGateLatitude, float fGateLongitude, float fGateSize, short sGateHeight, short sGateBase);
	void ClearTask();
	void AddTaskPoint(short sControlPoint);
	void SetDisplayOption(long lOption, short sValue);
	void AddPosition(short sPilotIndex, long lTimeIndex, float fLatitude, float fLongitude, long lAltitude, short sMotor);
	void SetWorldLimits(float fLatitudeBottom, float fLatitudeTop, float fLongitudeLeft, float fLongidudeRight, long lMinAltitude, long lMaxAltitude);
	void SetColor(short sOption, long lColor);
	void SetPilotTraceColor(LPCTSTR strContestNo, long lColor);
	void ResetAll();
	void ResetContestants();
	void Autoscale();
	void SetDisplayOptionD(long lOption, double dValue);
	void InitSite(float fLatitude, float fLongitude, short iAltitude);
	void SetStartGateLine(float fLat1, float flong1, float fLat2, float fLong2, long iStartCeiling);
	void SetFinishGateLine(float fLat1, float flong1, float fLat2, float fLong2, long iFinishGateBase);
	void SetPilotTimes(short sPilotID, long lSTime, long lFTime);
	void SetFinishTime(short sPilotID, long lTime);
	void AddPositionByName(LPCTSTR strContestNo, long lTime, float fLatitude, float fLongitude, short sAltitude);
	void SetCurrentTime(long lTime);
	void AddFixes(const VARIANT& vlTime, const VARIANT& vstrContestNo, const VARIANT& vfLatitude, const VARIANT& vfLongidude, const VARIANT& vsAltitude);
	void SetMinMaxAltitudes(short sMinAltitude, short sMaxAltitude);
	BOOL IsPilotVisible(LPCTSTR strContestNo);
	void SetTraceDisplayLength(long lDisplayLength);
	void SetActiveClass(short sClass);
	double GetDisplayOptionD(long lOption);
	long GetColor(short sOption);
	void OnEditProperties();
	void SetPilotText(LPCTSTR strContestNo, LPCTSTR strTitle);
	void SetRotations(float fRX, float fRY, short fRZ);
	void SetZScale(float SetZScale);
	void NudgeView(short sViewType);
	float GetZScale();
	long GetPilotColor(short sPilotIndex);
	void ScaleView(float fScale);
	short GetDisplayOption(long lOption);
	void SetSceneryPath(LPCTSTR strPath);
	void InvalidateGrid();
	void ZoomWindow();
	void AddTaskLocation(short iPointID, float fLat, float fLong, LPCTSTR strComment);
	void AddSUAirspace(LPCTSTR strAirspace);
	void DisplayNextTaskPoint();
	void SetTaskPointRadius(short sTaskPointID, float fRadius);
	void AddTATLocation(short sPointID, float fLat, float fLong);
	void DefineControlPointAttributes(long iTurnpoint, long iAirport, long iLandable, long iStart, long iFinish, long iHome, long iReserved1, long iReserved2, long iReserved3);
	CString GetVersionString();
	CString GetBuildDate();
	void OnMeasureCursor();
	long GetCurrentDisplayTime();
	void Set2ndStartGateCylinder(float fGateLatitude, float fGateLongitude, float fGateSize, short sGateHeight, short sGateBase);
	CString GetDisplayOptionStr(long lOption);
	void SetDisplayOptionStr(long lOption, LPCTSTR strValue);
	void SetStartTime(short sPilotID, long lTime);
	void SetTATLocation(short sPointID, float fLat, float fLong);
	BOOL WriteBMPFile(LPCSTR cFileName);
	void AutoscaleTask();
};
#endif
