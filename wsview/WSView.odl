// WSView.odl : type library source for ActiveX Control project.

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library (WSView.tlb) that will become a resource in
// WSView.ocx.

#include <olectl.h>
#include <idispids.h>

[ uuid(E0748843-5814-11D3-BA96-0010A4043281), version(1.0),
  helpfile("WSView.hlp"),
  helpstring("WSView ActiveX Control module"),
  control ]


library WSVIEWLib
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);


	//  Primary dispatch interface for CWSBaroCtrl

	[ uuid(49134334-1CE2-11D4-B1D2-54F85E000000),
	  helpstring("Dispatch interface for WSBaro Control"), hidden ]
	dispinterface _DWSBaro
 	   {
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CWSBaroCtrl)
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CWSBaroCtrl)
			[id(1)] short AddPilot(BSTR strContestNo, BSTR strLastName, BSTR strFirstName, short sClass, long lColorREF);
			[id(2)] void SetCursorPos(long lCursorTime);
			[id(3)] void AddPoint(short sPilotIndes, long lTimeIndex, short sGPSAltitude, short sPressureAltitude);
			[id(4)] void SetTimeRange(long lStartTime, long lEndTime);
			[id(5)] void AddPoints(VARIANT vlTime, VARIANT vstrContestNo, VARIANT vsPressureAlt, VARIANT vsGPSAlt);
			[id(6)] void ResetAll();
			[id(7)] void AddPointByName(BSTR strContestNo, long lTimeIndex, short sGPSAltitude, short sPressureAltitude);
			[id(8)] void OnControlKey(short nChar);
			[id(9)] void SetTaskOpenTime(long lTime);
			[id(10)] void RedrawBaro();
			[id(11)] void SetPilotVisibility(BSTR strContestNo, boolean bVisible);
			[id(12)] long GetCursorPos();
			[id(13)] boolean IsCursorEnd();
			[id(14)] void CursorHome();
			[id(15)] void AddFullPoint(short sPilotIndex, long lTimeIndex, short sGPSAltitude, short sPressAltitude, float fLat, float fLong, float fSpeed, float fVSpeed, short sENL);
			[id(16)] void SetDisplayOption(long lOption, short sValue);
			[id(17)] short GetDisplayOption(long lOption);
			[id(18)] void SetTaskCloseTime(long lTime);
			//}}AFX_ODL_METHOD

			[id(DISPID_ABOUTBOX)] void AboutBox();
	};

	//  Event dispatch interface for CWSBaroCtrl

	[ uuid(49134335-1CE2-11D4-B1D2-54F85E000000),
	  helpstring("Event interface for WSBaro Control") ]
	dispinterface _DWSBaroEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CWSBaroCtrl)
			[id(1)] void OnMoveCursor(long lNewTime);
			[id(2)] void UpdateText(BSTR strTime, BSTR strPosition, BSTR strGPSAlt, BSTR strPressAlt, BSTR strSpeed, BSTR strVSpeed);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CWSBaroCtrl

	[ uuid(49134336-1CE2-11D4-B1D2-54F85E000000),
	  helpstring("WSBaro Control"), control ]
	coclass WSBaro
	{
		[default] dispinterface _DWSBaro;
		[default, source] dispinterface _DWSBaroEvents;
	};


	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}


	//  Primary dispatch interface for CWSViewCtrl

	[ uuid(E0748844-5814-11D3-BA96-0010A4043281),
	  helpstring("Dispatch interface for WSView Control"), hidden ]
	dispinterface _DWSView
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CWSViewCtrl)
			[id(1)] long DisplayLength;
			[id(2)] boolean PointDisplay;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CWSViewCtrl)
			[id(3)] void SetTimeRange(long lStartTime, long lEndTime);
			[id(4)] short AddPilot(BSTR strContestNo, BSTR strLastName, BSTR strFirstName, short sClass );
			[id(5)] boolean SetCurrentTimeIndex(short sTime);
			[id(6)] void SetPilotVisibility(BSTR strContestNo, boolean bVisible);
			[id(7)] void SetViewScale(double dScale);
			[id(8)] void SetViewCenter(float dLat, float dLong);
			[id(9)] void AddControlPoint(short sID, BSTR strName, float fLatitude, float fLongitude, short sAltitude, short sAttribute);
			[id(10)] void SetStartGateCylinder(float fGateLatitude, float fGateLongitude, float fGateSize, short sGateHeight, short sGateBase);
			[id(11)] void SetFinishGateCylinder(float fGateLatitude, float fGateLongitude, float fGateSize, short sGateHeight,short sGateBase);
			[id(12)] void ClearTask();
			[id(13)] void AddTaskPoint(short sControlPoint);
			[id(14)] void SetDisplayOption(long lOption, short sValue);
			[id(15)] void AddPosition(short sPilotIndex, long lTimeIndex, float fLatitude, float fLongitude, long lAltitude, short sMotor);
			[id(16)] void SetWorldLimits(float fLatitudeBottom, float fLatitudeTop, float fLongitudeLeft, float fLongidudeRight, long lMinAltitude, long lMaxAltitude);
			[id(17)] void SetColor(short sOption, long lColor);
			[id(18)] void SetPilotTraceColor(BSTR strContestNo, long lColor);
			[id(19)] void ResetAll();
			[id(20)] void ResetContestants();
			[id(21)] void Autoscale();
			[id(48)] void SetDisplayOptionD(long lOption, double dValue);
			[id(22)] void InitSite(float fLatitude, float fLongitude, short iAltitude);
			[id(23)] void SetStartGateLine(float fLat1, float flong1, float fLat2, float fLong2, long iStartCeiling);
			[id(24)] void SetFinishGateLine(float fLat1, float fLong1, float fLat2, float fLong2, long iFinishGateBase);
			[id(25)] void SetPilotTimes(short sPilotID, long lSTime, long lFTime);
			[id(26)] void SetFinishTime(short sPilotID, long lTime);
			[id(27)] void AddPositionByName(BSTR strContestNo, long lTime, float fLatitude, float fLongitude, short sAltitude);
			[id(28)] void SetCurrentTime(long lTime);
			[id(29)] void AddFixes(VARIANT vlTime, VARIANT vstrContestNo, VARIANT vfLatitude, VARIANT vfLongidude, VARIANT vsAltitude);
			[id(30)] void SetMinMaxAltitudes(short sMinAltitude, short sMaxAltitude);
			[id(31)] boolean IsPilotVisible(BSTR strContestNo);
			[id(32)] void SetTraceDisplayLength(long lDisplayLength);
			[id(33)] void SetActiveClass(short sClass);
			[id(49)] double GetDisplayOptionD(long lOption);
			[id(34)] long GetColor(short sOption);
			[id(35)] void OnEditProperties();
			[id(36)] void SetPilotText(BSTR strContestNo, BSTR strTitle);
			[id(37)] void SetRotations(float fRX, float fRY, short fRZ);
			[id(38)] void SetZScale(float SetZScale);
			[id(39)] void NudgeView(short sViewType);
			[id(40)] float GetZScale();
			[id(41)] long GetPilotColor(short sPilotIndex);
			[id(42)] void ScaleView(float fScale);
			[id(43)] short GetDisplayOption(long lOption);
			[id(44)] void SetSceneryPath(BSTR strPath);
			[id(45)] void InvalidateGrid();
			[id(46)] void ZoomWindow();
			[id(47)] void AddTaskLocation(short iPointID, float fLat, float fLong, BSTR strComment);
			[id(50)] void AddSUAirspace(BSTR strAirspace);
			[id(51)] void DisplayNextTaskPoint();
			[id(52)] void SetTaskPointRadius(short sTaskPointID, float fRadius);
			[id(53)] void AddTATLocation(short sPointID, float fLat, float fLong);
			[id(54)] void DefineControlPointAttributes(long iTurnpoint, long iAirport, long iLandable, long iStart, long iFinish, long iHome, long iReserved1, long iReserved2, long iReserved3);
			[id(55)] BSTR GetVersionString();
			[id(56)] BSTR GetBuildDate();
			[id(57)] void OnMeasureCursor();
			[id(58)] long GetCurrentDisplayTime();
			[id(59)] void Set2ndStartGateCylinder(float fGateLatitude, float fGateLongitude, float fGateSize, short sGateHeight, short sGateBase);
			[id(60)] BSTR GetDisplayOptionStr(long lOption);
			[id(61)] void SetDisplayOptionStr(long lOption, BSTR strValue);
			[id(62)] void SetStartTime(short sPilotID, long lTime);
			[id(63)] void SetTATLocation(short sTaskPointID, float fLat, float fLong);
//			[id(65)] void AutoscaleTask();
			//}}AFX_ODL_METHOD
	};

	//  Event dispatch interface for CWSViewCtrl

	[ uuid(E0748845-5814-11D3-BA96-0010A4043281),
	  helpstring("Event interface for WSView Control") ]
	dispinterface _DWSViewEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CWSViewCtrl)
			[id(1)] void PilotSelection(BSTR strContestNo);
			[id(2)] void OnKeyDown(short nChar);
			[id(3)] void UpdateProperties();
			[id(4)] void PointSelected(short sOpt, long lTime);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CWSViewCtrl

	[ uuid(E0748846-5814-11D3-BA96-0010A4043281),
	  helpstring("WSView Control"), control ]
	coclass WSView
	{
		[default] dispinterface _DWSView;
		[default, source] dispinterface _DWSViewEvents;
	};


	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}

}
